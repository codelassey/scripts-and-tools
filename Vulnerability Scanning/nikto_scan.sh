#!/bin/bash
# I’m writing this script to automate vulnerability scanning on a target website using Nikto. 


echo ""
# Just adding a blank line for clean outerminal output easier to read.

# I want to make this script flexible. If the user provides a target (like a URL) as an argument, great, I’ll use it.
# If not, I’ll prompt them to enter one manually. This way, the script works interactively or non-interactively.

if [ -n "$1" ]; then
    target="$1"
else
    read -p "Enter target for Vulnerability Scanning:" target
fi

# By default, I’m assuming port 80 for the target(HTTP).
# If the user provides a second argument, I’ll use that instead. This gives flexibility for non-standard ports.
port="${2:-80}"

# I’m setting the scheme (http or https) based on the port. By default, it’s http since port 80 is common.
# If the port is 443, I’ll switch to https because that’s the standard for secure connections.
scheme="http"
if [ "$port" == "443" ]; then
   scheme="https"
fi

# I then create a directory named after the target to store results.
# The tr command replaces slashes in the target (like in URLs) with underscores to avoid messy folder names.
# The -p flag ensures mkdir doesn’t complain if the directory already exists.
mkdir -p "results/$(echo "$target" | tr '/' '_') Vulnerability Scan Results/"

echo ""
# Another blank line to keep the output tidy before showing the scan status.

# Letting the user know the scan is starting.
echo "Starting Vulnerability Scan on $target... "

echo ""
# One more blank line for readability before the scan runs.

# Here, I run Nikto to scan the target. I use the scheme, target, and port to form the URL since that's the format nikto uses.
# The -h flag tells Nikto what to scan, and -output saves the results to a text file in the results directory.
# /dev/null to keep the terminal clean so I don’t need to see Nikto’s raw output in the terminal.
# The results folder name is based on the target, so it’s easy to find later.
nikto -h "$scheme://$target:$port" -output "results/$(echo "$target" | tr '/' '_') Vulnerability Scan Results/nikto-scan.txt" > /dev/null 2>&1 

# I’m adding a visual separator to make the output look professional and signal the scan is done.
echo "============================================================================================="


echo "Vulnerability scan complete. Check 'results' folder with results saved as 'nikto-scan.txt'"


echo "============================================================================================="
