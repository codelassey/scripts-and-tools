#!/bin/bash
# I wrote this script to automate vulnerability scanning with Nuclei, focusing on CVEs and exposures..

echo ""

# Once again, if target is provided as an argument, the script runs.
# If not, I’ll ask them to enter one. This way, the script works for both command-line and interactive use.
# I did this so that I can easily call out all the single scripts to run from a centralized script.
if [ -n "$1" ]; then
    target="$1"
else
    read -p "Enter target for Vulnerability Scanning: " target
fi

# As usual, a directory to store the scan results is created
# The tr command replaces slashes in the target URL with underscores to prevent invalid folder names.
# The -p flag ensures mkdir doesn’t error out if the directory already exists.
mkdir -p "results/$(echo $target | tr '/' '_') Vulnerability Scan Results"

# Updating Nuclei’s templates before scanning.
# Fresh templates ensure the scan uses the latest vulnerability checks.
echo "Updating Nuclei Templates..."

nuclei -ut

echo ""

# Mentioning CVEs and exposures clarifies what the scan is looking for.
echo "Scanning $target for CVEs and Exposures ..."

# Nuclei scans the target for CVEs and exposures.
# The -u flag specifies the target URL, and -t flags point to the CVE and exposure templates in the default Nuclei directory.
# Saving the results to a file named nuclei_scan.txt in the results directory for easy access.
# Redirecting raw terminal output to /dev/null to keep the terminal clean.
nuclei -u $target -t ~/.local/nuclei-templates/cves -t ~/.local/nuclei-templates/exposures -o "results/$(echo $target | tr '/' '_') Vulnerability Scan Results/nuclei_scan.txt" > /dev/null 2>&1


echo "======================================================================"


echo "Vulnerability Scan Complete. Check 'results' folder, scan is saved in 'nuclei_scan.txt'"


echo "======================================================================"
