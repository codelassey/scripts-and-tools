#!/bin/bash
# I’m creating this script to automate vulnerability scanning using Nmap with the vulners script. 


echo ""

# If the user passes a target (like an IP or hostname) as a command-line argument, I’ll use it.
# If not, I’ll prompt them to enter one. This makes the script versatile for both automated and interactive use.
if [ -n "$1" ]; then
    target="$1"
else
    read -p "Enter target for Vulnerability Scanning: " target
fi

# I’m creating a directory named after the target to keep things organized.
# The tr command replaces any slashes in the target (like in URLs) with underscores to avoid invalid folder names.
# The -p flag ensures mkdir doesn’t throw an error if the directory already exists.
mkdir -p "results/$(echo $target | tr '/' '_') Vulnerability Scan Results/"

# Prompting that, the scan is starting and showing the target for clarity. This helps confirm what’s being scanned.
echo "Starting Vulnerability Scan on $target ..."

# Running Nmap with the vulners script to check for vulnerabilities.
# The -sV flag does version detection to identify services, and --script vulners pulls in vulnerability data.
# I then save the output to a file in the results directory named vuln-scan.txt for easy access later.
# Redirecting terminal output to  /dev/null which keeps the terminal clean since I only need the final file.
nmap -sV --script vulners "$target" -oN "results/$(echo $target | tr '/' '_')/vuln-scan.txt" > /dev/null 2>&1

# Adding a visual separator with equals signs to make the output look polished and signal the scan is done.
echo "======================================================================================="


echo "Vulnerability Scan Complete. Check 'results' folder, scan is saved in 'vuln-scan.txt'"


echo "======================================================================================="
